# Use the official Golang image to create a build artifact.
# This is based on Debian and sets the GOPATH environment variable at /go.
FROM golang:1.19 as builder

# Set the Current Working Directory inside the container
WORKDIR /app

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download all dependencies. Dependencies will be cached if the go.mod and go.sum files are not changed
RUN go mod download

# Copy the source from the current directory to the Working Directory inside the container
COPY . .

# Build the Go app
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o backend-server .

############################
# STEP 2 build a small image
############################
FROM alpine:latest

RUN apk --no-cache add ca-certificates

WORKDIR /root/

# Copy the Pre-built binary file from the previous stage
COPY --from=builder /app/backend-server .

# Create a .env file and populate it with environment variables
RUN echo "PG_HOST=localhost" >> .env && \
    echo "PG_PORT=5432" >> .env && \
    echo "PG_USER=postgres" >> .env && \
    echo "PG_PASS=password" >> .env && \
    echo "PG_NAME=dbname" >> .env && \
    echo "PORT=8080" >> .env && \
    echo "FIREBASE_SERVICE_JSON=dummy_firebase_service_json_content" >> .env && \
    echo "IMAGE_STORAGE_LOCATION=/tmp/images" >> .env

# Set environment variables
ENV PG_HOST=localhost
ENV PG_PORT=5432
ENV PG_USER=postgres
ENV PG_PASS=password
ENV PG_NAME=dbname
ENV PORT=8080
ENV FIREBASE_SERVICE_JSON=dummy_firebase_service_json_content
ENV IMAGE_STORAGE_LOCATION=/tmp/images

# Expose port to the outside world
EXPOSE $PORT

# Command to run the executable
CMD ["./backend-server"]
